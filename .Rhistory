wt_poisson(10000,20,1)
wt_poisson(10000,20,1)
wt_poisson(10000,20,1)
wt_poisson(10000,20,1)
wt_poisson <- function(x,n,lambda){
wt <- vector()
for (i in c(1:x)){
x_i <- rpois(n, lambda)
x_i_mean <- sum(x_i)/n
if (x_i_mean-1.96*(x_i_mean/sqrt(n)) < lambda & lambda < x_i_mean+1.96*(x_i_mean/sqrt(n))){
wt[i] <- 0 #Retain H0
}
else{ wt[i] <- 1 #Reject H0}
}
return(sum(wt)/x) #How many times Reject H0 among x'th test? Equals to Type1 Error
}}
wt_poisson(10000,20,1)
wt_poisson(10000,20,1)
wt_poisson(10000,20,1)
wt_poisson(10000,20,1)
wt_poisson <- function(x,n,lambda){
wt <- vector()
for (i in c(1:x)){
x_i <- rpois(n, lambda)
x_i_mean <- sum(x_i)/n
if (x_i_mean-1.96*(sqrt(x_i_mean/n)) < lambda & lambda < x_i_mean+1.96*(sqrt(x_i_mean/n))){
wt[i] <- 0 #Retain H0
}
else{ wt[i] <- 1 #Reject H0}
}
return(sum(wt)/x) #How many times Reject H0 among x'th test? Equals to Type1 Error
}}
wt_poisson(10000,20,1)
wt_poisson(10000,20,1)
wt_poisson(10000,20,1)
wt_poisson(10000,20,1)
wt_poisson(100,20,1)
wt_poisson(100,20,1)
wt_poisson <- function(x,n,lambda){
wt <- vector()
for (i in c(1:x)){
x_i <- rpois(n, lambda)
x_i_mean <- sum(x_i)/n
if (x_i_mean-1.96*(sqrt(x_i_mean/n)) <= lambda & lambda <= x_i_mean+1.96*(sqrt(x_i_mean/n))){
wt[i] <- 0 #Retain H0
}
else{ wt[i] <- 1 #Reject H0}
}
return(sum(wt)/x) #How many times Reject H0 among x'th test? Equals to Type1 Error
}}
wt_poisson(100,20,1)
wt_poisson(100,20,1)
wt_poisson(100,20,1)
wt_poisson2 <- function(x,n,lambda){
wt <- vector()
for (i in c(1:x)){
x_i <- rpois(n, lambda)
x_i_mean <- sum(x_i)/n
if (abs((x_i_mean-lambda)/sqrt(x_i_mean/n)) > 1.96){
wt[i] <- 0 #Retain H0
}
else{ wt[i] <- 1 #Reject H0}
}
return(sum(wt)/x) #How many times Reject H0 among x'th test? Equals to Type1 Error
}
}
wt_poisson2(10000,20,1)
wt_poisson2(10000,20,1)
wt_poisson2(1000,20,1)
wt_poisson2(1000,20,1)
wt_poisson2(1000,20,1)
wt_poisson <- function(x,n,lambda){
wt <- vector()
set.seed(12345)
for (i in c(1:x)){
x_i <- rpois(n, lambda)
x_i_mean <- sum(x_i)/n
if (x_i_mean-1.96*(sqrt(x_i_mean/n)) <= lambda & lambda <= x_i_mean+1.96*(sqrt(x_i_mean/n))){
wt[i] <- 0 #Retain H0
}
else{ wt[i] <- 1 #Reject H0}
}
return(sum(wt)/x) #How many times Reject H0 among x'th test? Equals to Type1 Error
}}
wt_poisson(100,20,1)
wt_poisson(1000,20,1)
wt_poisson2 <- function(x,n,lambda){
wt <- vector()
for (i in c(1:x)){
x_i <- rpois(n, lambda)
x_i_mean <- sum(x_i)/n
if (abs((x_i_mean-lambda)/sqrt(x_i_mean/n)) > 1.96){
wt[i] <- 1 #Retain H0
}
else{ wt[i] <- 0 #Reject H0}
}
return(sum(wt)/x) #How many times Reject H0 among x'th test? Equals to Type1 Error
}
}
wt_poisson2(1000,20,1)
wt_poisson2(1000,20,1)
wt_poisson2 <- function(x,n,lambda){
wt <- vector()
for (i in c(1:x)){
x_i <- rpois(n, lambda)
x_i_mean <- sum(x_i)/n
if (abs((x_i_mean-lambda)/sqrt(x_i_mean/n)) > 1.96){
wt[i] <- 1 #Retain H0
}
else{ wt[i] <- 0 #Reject H0}
}
return(sum(wt)) #How many times Reject H0 among x'th test? Equals to Type1 Error
}
}
wt_poisson2(1000,20,1)
wt_poisson2 <- function(x,n,lambda){
wt <- vector()
for (i in (1:x)){
x_i <- rpois(n, lambda)
x_i_mean <- sum(x_i)/n
if (abs((x_i_mean-lambda)/sqrt(x_i_mean/n)) > 1.96){
wt[i] <- 1 #Retain H0
}
else{ wt[i] <- 0 #Reject H0}
}
return(sum(wt)) #How many times Reject H0 among x'th test? Equals to Type1 Error
}
}
wt_poisson2(1000,20,1)
wt_poisson2 <- function(x,n,lambda){
wt <- vector()
for (i in c(1:x)){
x_i <- rpois(n, lambda)
x_i_mean <- sum(x_i)/n
if (abs((x_i_mean-lambda)/sqrt(x_i_mean/n)) > 1.96){
wt[i] <- (x_i_mean-lambda)/sqrt(x_i_mean/n)
#wt[i] <- 1 #Retain H0
}
else{ wt[i] <- 0 #Reject H0}
}
return(wt) #How many times Reject H0 among x'th test? Equals to Type1 Error
}
}
a <- wt_poisson2(100,20,1)
a
wt_poisson2 <- function(x,n,lambda){
wt <- vector()
for (i in c(1:x)){
x_i <- rpois(n, lambda)
x_i_mean <- sum(x_i)/n
#if (abs((x_i_mean-lambda)/sqrt(x_i_mean/n)) > 1.96){
wt[i] <- (x_i_mean-lambda)/sqrt(x_i_mean/n)
#wt[i] <- 1 #Retain H0
#}
#else{ wt[i] <- 0 #Reject H0}
# }
return(wt) #How many times Reject H0 among x'th test? Equals to Type1 Error
}
}
a <- wt_poisson2(100,20,1)
a
a <- wt_poisson2(100,20,1)
a
a <- wt_poisson2(100,20,1)
a <- wt_poisson2(100,20,1)
a <- wt_poisson2(100,20,1)
a <- wt_poisson2(100,20,1)
a <- wt_poisson2(100,20,1)
a <- wt_poisson2(100,20,1)
a <- wt_poisson2(100,20,1)
sqrt(1919) * (997/1919 - 0.5) / 0.5
dnorm(-1.712)
qnorm(-1.712)
pnorm(-1.712)
wt_poisson2 <- function(x,n,lambda){
wt <- vector()
for (i in c(1:x)){
x_i <- rpois(n, lambda)
x_i_mean <- sum(x_i)/n
#if (abs((x_i_mean-lambda)/sqrt(x_i_mean/n)) > 1.96){
wt[i] <- (x_i_mean-lambda)/sqrt(x_i_mean/n)
#wt[i] <- 1 #Retain H0
#}
#else{ wt[i] <- 0 #Reject H0}
}
return(wt) #How many times Reject H0 among x'th test? Equals to Type1 Error
}
}
wt_poisson2 <- function(x,n,lambda){
wt <- vector()
for (i in c(1:x)){
x_i <- rpois(n, lambda)
x_i_mean <- sum(x_i)/n
#if (abs((x_i_mean-lambda)/sqrt(x_i_mean/n)) > 1.96){
wt[i] <- (x_i_mean-lambda)/sqrt(x_i_mean/n)
#wt[i] <- 1 #Retain H0
#}
#else{ wt[i] <- 0 #Reject H0}
}
return(wt) #How many times Reject H0 among x'th test? Equals to Type1 Error
}
a <- wt_poisson2(100,20,1)
a
sum(if(abs(a)>1.96))
sum(if(abs(a)>1.96))
sum(if(abs(a)>1.96))
if(abs(a)>1.96)
abs(a)
abs(a)>1.96
sum(abs(a)>1.96)
wt_poisson2 <- function(x,n,lambda){
wt <- vector()
for (i in c(1:x)){
x_i <- rpois(n, lambda)
x_i_mean <- sum(x_i)/n
#if (abs((x_i_mean-lambda)/sqrt(x_i_mean/n)) > 1.96){
wt[i] <- abs((x_i_mean-lambda)/sqrt(x_i_mean/n))
#wt[i] <- 1 #Retain H0
#}
#else{ wt[i] <- 0 #Reject H0}
}
return(sum(wt>1.96)/x)/ #How many times Reject H0 among x'th test? Equals to Type1 Error
}
wt_poisson2 <- function(x,n,lambda){
wt <- vector()
for (i in c(1:x)){
x_i <- rpois(n, lambda)
x_i_mean <- sum(x_i)/n
wt[i] <- abs((x_i_mean-lambda)/sqrt(x_i_mean/n))
return(sum(wt>1.96)/x)/ #How many times Reject H0 among x'th test? Equals to Type1 Error
}
wt_poisson2 <- function(x,n,lambda){
wt <- vector()
for (i in c(1:x)){
x_i <- rpois(n, lambda)
x_i_mean <- sum(x_i)/n
wt[i] <- abs((x_i_mean-lambda)/sqrt(x_i_mean/n))
return(sum(wt>1.96)/x)/ #How many times Reject H0 among x'th test? Equals to Type1 Error
}
}
wt_poisson2 <- function(x,n,lambda){
wt <- vector()
for (i in c(1:x)){
x_i <- rpois(n, lambda)
x_i_mean <- sum(x_i)/n
wt[i] <- abs((x_i_mean-lambda)/sqrt(x_i_mean/n))
}
return(sum(wt>1.96)/x)/ #How many times Reject H0 among x'th test? Equals to Type1 Error
}
wt_poisson2 <- function(x,n,lambda){
wt <- vector()
for (i in c(1:x)){
x_i <- rpois(n, lambda)
x_i_mean <- sum(x_i)/n
wt[i] <- abs((x_i_mean-lambda)/sqrt(x_i_mean/n))
}
return(sum(wt>1.96)/x) #How many times Reject H0 among x'th test? Equals to Type1 Error
}
wt_poisson2(10000,20,1)
wt_poisson2(10000,20,1)
wt_poisson2(10000,20,1)
wt_poisson2(10000,20,1)
wt_poisson2(10000,20,1)
wt_poisson2(10000,20,1)
wt_poisson2(100000,20,1)
wt_poisson2 <- function(x,n,lambda){
wt <- vector()
for (i in c(1:x)){
x_i <- rpois(n, lambda)
x_i_mean <- sum(x_i)/n
wt[i] <- abs((x_i_mean-lambda)/sqrt(x_i_mean/n))
}
return(sum(wt>1.96)/x) #How many times Reject H0 among x'th test? Equals to Type1 Error
}
wt_poisson2(10000,20,1)
wt_poisson2(10000,20,1)
pnorm(-1.71,0,1)
pnorm(-1.71,0,1)*2
pnorm(1.71,0,1)*2
pnorm(-1.71,0,1)*2
pnorm(-(922/1919-0.5)/sqrt(922*977/1919^3),0,1)
pnorm(-((922/1919)-0.5)/sqrt(922*977/(1919^3)),0,1)
pnorm(-((922/1919)-0.5)/sqrt(922*997/(1919^3)),0,1)
2*pnorm(((922/1919)-0.5)/sqrt(922*997/(1919^3)),0,1)
2*pnorm(-((922/1919)-0.5)/sqrt(922*997/(1919^3)),0,1)
pnorm(-1.5)
pnorm(1.5)
pnorm(-1.5) + pnorm(1.5)
2*pnorm(((922/1919)-0.5)/sqrt(922*997/(1919^3)),0,1)
2*pnorm(1.71)
2*pnorm(-1.71)
2*pnorm(((922/1919)-0.5)/sqrt(922*997/(1919^3)),0,1)
View(wt_poisson)
Sys.unsetenv(a)
Sys.unsetenv(wt_poisson)
Sys.unsetenv(wt_poisson())
check_sets <- function(sets){
if(sum(sapply(sets,class)=="character")+sum(sapply(sets,class)=="integer") != length(sets)){
stop("Argument sets must be a list with vectors of character or integer.")
}
}
#Align Sets with all numeric vector(if there is a charactor vectof)
align_sets <- function(data,sets){
sets_m <- lapply(sets, function(x){
if(class(x)=="character"){
x <- match(x,colnames(data))}
x})
return(sets_m)
}
list_name <- function(sets, name){
setnm <- vector()
for(b in 1:length(sets)){
setnm[b] <- paste(name,b,sep="")
}
names(sets) <- setnm
return(sets)
}
col_name <- function(matrix, name){
colnm <- vector()
for(c in 1:ncol(matrix)){
colnm[c] <- paste(name,c,sep="")
}
colnames(matrix) <- colnm
return(matrix)
}
# Main function : mfa
mfa <- function(data, sets, ncomps = NULL, center = TRUE, scale = TRUE, rownames=NULL){
require(expm)
#data.frame to matrix
if(class(data)=="data.frame"){data <- data.matrix(data)}
#Error Check
check_sets(sets)
#Align Sets
sets_mod <- align_sets(data, sets)
#Sets name
sets_mod <- list_name(sets_mod,"table")
#Data.row.name
if(!is.null(rownames)){rownames(data) <- rownames}
#Scaling
data_scale<- scale(data, center = center, scale = scale)
attr(data_scale,"scaled:center")<-NULL
attr(data_scale,"scaled:scale")<-NULL
#Data Split
l <- length(sets_mod)
for (i in 1:l){
x <- paste("X",i,sep="")
assign(x,data_scale[,sets_mod[[i]] ])
}
#Get alpha weight
l_sets <- sapply(sets_mod,length)
A <- vector()
for (j in (1:l)){
x <- get(paste("X",j,sep=""))
q <- paste("q",j,sep="")
svd <- assign(q,svd(x))
A[j] <- 1/(svd$d[1]^2)
}
A_diag <- diag(rep(A, l_sets))
M_diag <- diag(rep(1/nrow(data), nrow(data)))
#GSVD
Z <- sqrtm(M_diag) %*% data_scale %*% sqrtm(A_diag)
svd_Z <- svd(Z)
#Attr1-1 : Singular value
attr_sglr <- svd_Z$d
#Attr1-2 : Eigenvalue
attr_eign <- svd_Z$d^2
#Matrix of loading(ML)
ML <- expm(-0.5*logm(A_diag)) %*% svd_Z$v
ML <- col_name(ML,"component")
#Factor Score(F)
gsvd_U <- expm(-0.5*logm(M_diag)) %*% svd_Z$u
F <- gsvd_U %*% diag(svd_Z$d)
#row & col names
F <- col_name(F,"component")
if(!is.null(rownames)){rownames(F) <- rownames}
#Partial Factor score(PF)
PF <- list()
for (h in (1:l)){
x <- get(paste("X",h,sep=""))
pf <- paste("PF",h,sep="")
if(ncomps>0){
assign(pf, l * A[h] * x %*% ML[sets_mod[[h]],1:ncomps])
}
else{
assign(pf, l * A[h] * x %*% ML[sets_mod[[h]],])
}
if(!is.null(rownames)){
}
PF[[h]] <- get(paste("PF",h,sep=""))
}
#Set up list & attributes
class(list) <- "mfa"
list <- list(
data_original = data,
data_scale = data_scale,
rownames = rownames,
sets_align = sets_mod,
alpha_weight = A,
singular_value = attr_sglr,
eigen_value = attr_eign,
gsvd_delta = gsvd_U,
factor_score = F,
matrix_of_loading = ML,
partial_factor_score = PF
)
if(ncomps>0){
list$factor_score <-  F[,1:ncomps]
list$matrix_of_loading <- ML[,1:ncomps]
}
#list name for matrix of loading(same as name of sets)
list$partial_factor_score <- list_name(list$partial_factor_score,"table")
list
}
X <- mfa(wine[2:54], list(c('V1','V2','V3','V4','V5','V6'), 7:12, 13:18, 19:23,24:29,30:34,35:38,39:44,45:49,50:53), ncomps=2, rownames=wine[,1])
wine <- read.csv("/Users/TAEHEEJUNG/Dropbox/243-final/data/wines.csv", stringsAsFactors=FALSE, header=T)
setwd("/Users/TAEHEEJUNG/Dropbox/243-final")
X <- mfa(wine[2:54], list(c('V1','V2','V3','V4','V5','V6'), 7:12, 13:18, 19:23,24:29,30:34,35:38,39:44,45:49,50:53), ncomps=2, rownames=wine[,1])
X
source('~/Desktop/MFA_THJUNG_V0.2.R', echo=TRUE)
require(gridExtra)
plot1 <- ggplot(data=data.frame(X$partial_factor_score$table1, name=rownames(X$partial_factor_score$table1)), aes(x=component1, y=component2, label=name)) + geom_point() + geom_text(vjust=2) + theme_bw()
plot2 <- ggplot(data=data.frame(X$partial_factor_score$table2, name=rownames(X$partial_factor_score$table2)), aes(x=component1, y=component2, label=name)) + geom_point() + geom_text(vjust=2) + theme_bw()
grid.arrange(plot1, plot2, ncol=2)
require(ggplot2)
require(gridExtra)
plot1 <- ggplot(data=data.frame(X$partial_factor_score$table1, name=rownames(X$partial_factor_score$table1)), aes(x=component1, y=component2, label=name)) + geom_point() + geom_text(vjust=2) + theme_bw()
plot2 <- ggplot(data=data.frame(X$partial_factor_score$table2, name=rownames(X$partial_factor_score$table2)), aes(x=component1, y=component2, label=name)) + geom_point() + geom_text(vjust=2) + theme_bw()
grid.arrange(plot1, plot2, ncol=2)
plot <- list()
for (i in 1:10){
table <- get(paste("X$partial_factor_score$table",i,sep=""))
plot[i] <- ggplot(data=data.frame(table, name=rownames(table)), aes(x=component1, y=component2, label=name)) + geom_point() + geom_text(vjust=2) + theme_bw()
}
X$partial_factor_score$table1
plot <- list()
for (i in 1:10){
plot[i] <- ggplot(data=data.frame(get(paste("X$partial_factor_score$table",i,sep="")), name=rownames(table)), aes(x=component1, y=component2, label=name)) + geom_point() + geom_text(vjust=2) + theme_bw()
}
X$partial_factor_score$table1
plot <- list()
for (i in 1:10){
plot[i] <- ggplot(data=data.frame(get(paste('X$partial_factor_score$table',i,sep="")), name=rownames(table)), aes(x=component1, y=component2, label=name)) + geom_point() + geom_text(vjust=2) + theme_bw()
}
get(paste('X$partial_factor_score$table',i,sep="")
plot <- list()
for (i in 1:10){
table <- get(paste("X$partial_factor_score$table",i,sep=""))
plot[i] <- ggplot(data=data.frame(table, name=rownames(table)), aes(x=component1, y=component2, label=name)) + geom_point() + geom_text(vjust=2) + theme_bw()
}
plot <- list()
for (i in 1:10){
table <- get(paste("X","$","partial_factor_score","$","table",i,sep=""))
plot[i] <- ggplot(data=data.frame(table, name=rownames(table)), aes(x=component1, y=component2, label=name)) + geom_point() + geom_text(vjust=2) + theme_bw()
plot <- list()
for (i in 1:10){
table <- get(paste("X","$","partial_factor_score","$","table",i,sep=""))
plot[i] <- ggplot(data=data.frame(table, name=rownames(table)), aes(x=component1, y=component2, label=name)) + geom_point() + geom_text(vjust=2) + theme_bw()
}
X$partial_factor_score[[1]]
for (i in 1:10){
table <- eval(parse(X$partial_factor_score[[i]]))
plot[i] <- ggplot(data=data.frame(table, name=rownames(table)), aes(x=component1, y=component2, label=name)) + geom_point() + geom_text(vjust=2) + theme_bw()
}
for (i in 1:10){
table <- eval(parse(text="X$partial_factor_score"[[i]]))
plot[i] <- ggplot(data=data.frame(table, name=rownames(table)), aes(x=component1, y=component2, label=name)) + geom_point() + geom_text(vjust=2) + theme_bw()
}
for (i in 1:10){
table <- eval(parse(text="X$partial_factor_score"[[i]]))
plot[i] <- ggplot(data=data.frame(table), aes(x=component1, y=component2)) + geom_point() + geom_text(vjust=2) + theme_bw()
}
for (i in 1:10){
table <- eval(X$partial_factor_score[[i]])
plot[i] <- ggplot(data=data.frame(table, name=rownames(table)), aes(x=component1, y=component2, label=name)) + geom_point() + geom_text(vjust=2) + theme_bw()
}
for (i in 1:10){
table <- eval(parse(text=X$partial_factor_score))[[i]]
plot[i] <- ggplot(data=data.frame(table, name=rownames(table)), aes(x=component1, y=component2, label=name)) + geom_point() + geom_text(vjust=2) + theme_bw()
}
for (i in 1:10){
table <- eval(parse(text=X$partial_factor_score))[[i]]
plot[i] <- ggplot(data=data.frame(table), aes(x=component1, y=component2)) + geom_point() + geom_text(vjust=2) + theme_bw()
}
for (i in 1:10){
table <- X$partial_factor_score[[paste0("table",i)]]
plot[i] <- ggplot(data=data.frame(table, name=rownames(table)), aes(x=component1, y=component2, label=name)) + geom_point() + geom_text(vjust=2) + theme_bw()
}
X$partial_factor_score[[1]]
plot <- list()
for (i in 1:10){
table <- X$partial_factor_score[[i]]
plot[i] <- ggplot(data=data.frame(table, name=rownames(table)), aes(x=component1, y=component2, label=name)) + geom_point() + geom_text(vjust=2) + theme_bw()
}
for (i in 1:10){
table <- X$partial_factor_score[[i]]
}
table
partial_factor_score[[10]]
for (i in 1:10){
table <- X$partial_factor_score[[i]]
plot[[i]] <- ggplot(data=data.frame(table, name=rownames(table)), aes(x=component1, y=component2, label=name)) + geom_point() + geom_text(vjust=2) + theme_bw()
}
grid.arrange(plot, ncol=5)
require(ggplot2)
require(gridExtra)
for (i in 1:10){
table <- X$partial_factor_score[[i]]
plot[[i]] <- ggplot(data=data.frame(table, name=rownames(table)), aes(x=component1, y=component2, label=name)) + geom_point() + geom_text(vjust=2) + theme_bw()
}
grid.arrange(plot, ncol=5)
do.call(grid.arrange,plot)
do.call(grid.arrange,c(plot, ncol=5))
